buildscript {
    repositories {
        maven { url "https://repo.spring.io/libs-release" }
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath(
                'org.springframework.boot:spring-boot-gradle-plugin:2.2.1.RELEASE'
                , 'com.netflix.nebula:gradle-ospackage-plugin:2.+'
        )
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'rpm'
apply plugin: 'war'
    

idea{
    project{
        jdkName = '12'
        languageLevel = '12'
    }
}

jar {
    version =  '0.1.0'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/libs-release" }
    jcenter()
}

wrapper {
    gradleVersion = '6.0.1'
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-actuator"){
        exclude group: 'ch.qos.logback', module: "logback-classic"
    }
    compile("org.apache.commons:commons-lang3:3.3.2")
    testCompile("junit:junit")
    testCompile("com.github.tomakehurst:wiremock:1.52")
    testCompile "org.mockito:mockito-core:1.8.4"
    testCompile "org.springframework:spring-test:4.0.3.RELEASE"
    testCompile 'com.jayway.restassured:rest-assured:2.4.0'
}


def getRunProcessBuilder() {
    def builder = new ProcessBuilder('./gradlew', 'run')
    builder.redirectOutput(ProcessBuilder.Redirect.INHERIT)
    return builder
}

def getDebugProcessBuilder() {
    def builder = new ProcessBuilder('./gradlew', 'run', '--debug', '--debug-jvm')
    builder.redirectOutput(ProcessBuilder.Redirect.INHERIT)
    return builder
}


task runIS {
    doLast {
        ProcessBuilder builder = getRunProcessBuilder()
        Process process = builder.start();
        process.waitFor();
    }
}

task debugIS {
    doLast {
        ProcessBuilder builder = getDebugProcessBuilder()
        Process process = builder.start();
        process.waitFor();
    }
}

apply plugin: 'application'
mainClassName = "in.org.projecteka.clientregistry.launch.Application"

war {
    from sourceSets.main.resources
    manifest {
        attributes('Main-Class': mainClassName)
    }
}

private Properties loadConfig() {
    Properties properties = new Properties()
    properties.load(new FileInputStream(file("${projectDir}/env/local.properties")));
    properties
}

task assembly(dependsOn: 'build') {
    doLast {
        new File("${buildDir}/etc/").mkdir();
    }
}

task exportProperties(dependsOn: 'assembly') {
    doLast {
        PrintStream output = new PrintStream(new FileOutputStream(file("${buildDir}/etc/identity-server")));
        Properties properties = loadConfig()
        properties.each { prop, val ->
            output.println("export " + prop + "=" + val)
        }
    }
}

//task dist(dependsOn: 'exportProperties', type: Rpm) {
//    packageName = 'identity-server'
//    version = '0.1'
//    release = project.hasProperty('release') ? project.release : '1'
//    arch = NOARCH
//    os = LINUX
//
//    into '/opt/identity-server'
//
//    postInstall = file('scripts/utils/postInstall.sh')
//    preUninstall = file('scripts/utils/preUninstall.sh')
//    postUninstall = file('scripts/utils/postUninstall.sh')
//
//    from("${buildDir}/etc") {
//        fileMode = 0755
//        into 'etc'
//    }
//
//    from("scripts/rpm") {
//        fileMode = 0755
//        exclude 'placeholder'
//        into 'bin'
//    }
//
//    from("${buildDir}/libs") {
//        fileMode = 0755
//        into 'lib'
//    }
//
//    from("scripts/rpm") {
//        fileMode = 0755
//        exclude 'identity-server'
//        into 'var'
//    }
//}

